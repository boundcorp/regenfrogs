schema {
  query: Query
  mutation: Mutation
}

union AdoptFrogResult = AdoptFrogSuccess | Error

type AdoptFrogSuccess {
  frog: FrogProfile
}

scalar DateTime

type Error {
  message: String!
}

type FrogForVisitor {
  frog: FrogProfile
  visitor: VisitorResponse
}

type FrogProfile {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: UserProfile!
  alive: Boolean!
  health: Int!
  sanity: Int!
  hunger: Int!
  status: FrogProfileStatus!
  diedAt: DateTime
  lastLoop: DateTime
  nextLoop: DateTime
  sanityCounter: Int!
  species: String
  hands: String
  clothes: String
  ipfsImageCid: String
  ipfsMetadataCid: String
  mintedNftId: Int
  mintedNftAddress: String
  mintedNftTxHash: String
  mintedNftReceipt: String
  imageUrl: String
}

enum FrogProfileStatus {
  HAPPY
  CONTENT
  SAD
}

union InteractionResult = InteractionSuccess | Error

type InteractionSuccess {
  success: Boolean
}

input MintedFrogInput {
  id: String!
  nftId: Int!
  address: String!
  txHash: String!
  receipt: String!
}

union MintedFrogResult = MintedFrogSuccess | Error

type MintedFrogSuccess {
  frog: FrogProfile
}

type Mutation {
  adoptFrog(fid: Int!): AdoptFrogResult
  mintedFrog(input: MintedFrogInput): MintedFrogResult
  frameInteraction(frameUrl: String!, interactionJson: String!): InteractionResult
}

type Query {
  frogForVisitor(id: String!, fid: Int): FrogForVisitor
  frogByFid(fid: Int!): FrogProfile
  myProfile: UserProfile
}

type UserProfile {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  id: String!
  farcasterId: Int!
}

type VisitorResponse {
  user: UserProfile
  actionsAllowed: Boolean!
  cooldownUntil: Int
}
